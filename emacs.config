(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete-20220105.439/")
(require 'auto-complete-config)
(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete-20220105.439/dict/")
(ac-config-default)
(require 'popup)
(setq ac-quick-help-prefer-pos-tip t)   ;default is t
(add-to-list 'load-path "~/.emacs.d/plugins/yasnippet-5cbdbf0d2015540c59ed8ee0fcf4788effdf75b6/")
(require 'yasnippet)
(yas/global-mode 1)
(global-linum-mode 1) ; always show line numbers
(setq linum-format "%d| ")  ;set format
;(add-to-list 'load-path "~/.emacs.d/plugins/find-define-master/")
;(require 'find-define)
;(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
;(setq xref-show-definitions-function #'xref-show-definitions-completing-read)
;(add-to-list 'load-path "~/.emacs.d/plugins/dumb-jump-master/")
;(setq dumb-jump-default-project "/home/code")
;(setq dumb-jump-force-searcher 'ag)
(setq-default kill-whole-line t)
;;git-emacs
(add-to-list 'load-path "~/.emacs.d/plugins/git-emacs-master/")
(require 'git-emacs)
(setq default-directory "/home/code/" )
;(add-to-list 'load-path "~/.emacs.d/plugins/ggtags-8e16861392d7499bf3a212db1f5e9e0ef2e4fba9/")
;(require 'ggtags)
(setq tags-file-name "/home/code/TAGS")
;(add-hook 'c-mode-common-hook
;	            (lambda ()
;		                  (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;				                  (ggtags-mode 1))))
;(provide 'init-ggtags)
;(global-set-key "\C-w" 'clipboard-kill-region)
;(global-set-key "\M-w" 'clipboard-kill-ring-save)
;(global-set-key "\C-y" 'clipboard-yank)
(global-set-key(kbd "TAB") 'self-insert-command)
(setq default-tab-width 4)
(setq backward-delete-char-untabify-method nil)
(defun my-c-mode-hook ()
		       (setq c-basic-offset 4
			             c-indent-level 4
				             c-default-style "bsd"))
(add-hook 'c-mode-common-hook 'my-c-mode-hook)
(add-to-list 'load-path "~/.emacs.d/plugins/etags-update-master/")
(require 'etags-update)



(add-to-list 'load-path "~/.emacs.d/plugins/auto-complete-clang-master/")
(require 'auto-complete-clang)
(setq ac-auto-start t)
;(ac-set-trigger-key "TAB")
(setq ac-quick-help-delay 0.5)
(setq ac-clang-auto-save t)
 ;; (define-key ac-mode-map  [(control tab)] 'auto-complete)
;(define-key ac-mode-map  [(control tab)] 'auto-complete)
 (defun my-ac-config ()
 (setq-default ac-sources '(ac-source-abbrev ac-source-dictionary ac-source-words-in-same-mode-buffers))
 (add-hook 'emacs-lisp-mode-hook 'ac-emacs-lisp-mode-setup)
;; (add-hook 'c-mode-common-hook 'ac-cc-mode-setup)
 (add-hook 'ruby-mode-hook 'ac-ruby-mode-setup)
 (add-hook 'css-mode-hook 'ac-css-mode-setup)
 (add-hook 'auto-complete-mode-hook 'ac-common-setup)
 (global-auto-complete-mode t))
(defun my-ac-cc-mode-setup ()
(setq ac-sources (append '(ac-source-clang ac-source-yasnippet) ac-sources)))
(add-hook 'c-mode-common-hook 'my-ac-cc-mode-setup)
;; ac-source-gtags
(my-ac-config)

(setq ac-clang-flags
      (mapcar (lambda(item)(concat "-I" item))
	      (split-string
		"
/usr/include/c++/4.8.5/
/usr/include/c++/4.8.5/x86_64-redhat-linux/
/usr/include/c++/4.8.5/backward/
/usr/lib/gcc/x86_64-redhat-linux/4.8.5/include
/usr/local/include
/usr/include
/home/code/linux-4.14/include/linux

		")))
(defun read-only-setup () (read-only-mode))
(add-hook 'find-file-hook #'read-only-setup)

(add-to-list 'load-path "~/.emacs.d/plugins/highlight-symbol.el-master/")
(require 'highlight-symbol)
(global-set-key [(control f3)] 'highlight-symbol)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [(shift f3)] 'highlight-symbol-prev)
;(global-set-key [(meta f3)] 'highlight-symbol-query-replace)
(setq default-buffer-file-coding-system 'utf-8-unix)
;;指定新建buffer的默认编码为utf-8-unix，换行符为unix的方式
(add-to-list 'load-path "~/.emacs.d/plugins/imenu-list-76f2335ee6f2f066d87fe4e4729219d70c9bc70d/")
(require 'imenu-list)
(setq imenu-list-focus-after-activation t)
(setq imenu-list-auto-resize nil)
(setq imenu-list-after-jump-hook nil)
(add-hook 'imenu-list-after-jump-hook #'recenter-top-bottom)
;(kill-buffer "*scratch*")
;(imenu-list-minor-mode 1)
(add-to-list 'load-path "~/.emacs.d/plugins/helm-master/")
(require 'helm-config)
(helm-mode 1)
(add-to-list 'load-path "~/.emacs.d/plugins/projectile-master/")
(require 'projectile)
;(add-hook 'after-init-hook #'projectile-global-mode)
(add-to-list 'load-path "~/.emacs.d/plugins/helm-projectile-58123f14c392021714fc5d23b9f95c7f95ce07f1/")
(require 'helm-projectile)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages (quote (helm-rg))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(global-set-key (kbd "C-c p") 'helm-projectile-find-file)
(global-set-key (kbd "C-c g") 'helm-projectile-grep)
;(setq inhibit-startup-message t)
;(setq initial-scratch-message "")
(define-key global-map "\M-*" 'pop-tag-mark)
;(add-to-list 'load-path "~/.emacs.d/plugins/color-theme-3a2f6b615f5e2401e30d93a3e0adc210bbb4b7aa/")
;(require 'color-theme)
;(color-theme-initialize)
